{"version":3,"sources":["images/music_backgnd_faded.jpg","images/doug_logo_2.jpg","components/NavBar.js","components/Jumbotron.js","components/GameBody.js","components/CharCard.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","NavBar","props","react_default","a","createElement","className","banner","score","topScore","sectionStyle","width","backgroundImage","concat","music_backgnd_faded","color","Jumbotron","style","gameBodyStyle","height","GameBody","children","cardStyle","maxHeight","objectFit","objectPosition","CharCard","console","log","key","name","onClick","handleClick","alt","src","image","data-clicked","isClicked","logoStyle","position","Footer","doug_logo_2","randomize","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","App","state","characters","selectedChars","componentDidMount","_this","setState","e","clickedArray","Object","objectSpread","gameReset","id","handleScore","checkRepeats","target","includes","storeTopScore","storeScore","_this2","this","components_NavBar","components_Jumbotron","components_GameBody","map","character","components_CharCard","components_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.232f2af6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/music_backgnd_faded.7705582e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/doug_logo_2.30833571.jpg\";","import React from 'react';\r\n\r\nconst NavBar = props => {\r\n  // console.log(props);\r\n  return (\r\n    <nav className=\"navbar navbar-expand-sm py-3 font-weight-bold\">\r\n      <div className=\"container\">\r\n        <div className=\"col-lg-4\">\r\n          <span className=\"navbar-brand float-left\">\r\n            Doug Funnie Memory Game\r\n          </span>\r\n        </div>\r\n        <div className=\"col-lg-4\">\r\n          <span className=\"navbar-brand center\">{props.banner}</span>\r\n        </div>\r\n        <div className=\"col-lg-4\">\r\n          <span className=\"navbar-brand float-right\">\r\n            Score: {props.score} | Top Score: {props.topScore}\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React from 'react';\r\nimport music_backgnd_faded from '../images/music_backgnd_faded.jpg';\r\n\r\nconst sectionStyle = {\r\n  width: '100%',\r\n  backgroundImage: `url(${music_backgnd_faded})`,\r\n  color: '#d7f46f'\r\n};\r\n\r\nconst Jumbotron = () => {\r\n  return (\r\n    <div className=\"jumbotron jumbotron-fluid\" style={sectionStyle}>\r\n      <div className=\"container\">\r\n        <h1 className=\"display-4 font-weight-bold\">Doug Funnie Memory Game!</h1>\r\n        <h3 className=\"font-weight-bold\">\r\n          Click on the images to earn points, but be careful! Don't click on a\r\n          character twice, or your score will be reset! Highest possible score\r\n          is 12.\r\n        </h3>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Jumbotron;\r\n","import React from 'react';\r\n\r\nconst gameBodyStyle = {\r\n  height: '650px'\r\n};\r\n\r\nconst GameBody = props => {\r\n  return (\r\n    <div className=\"jumbotron jumbotron-fluid bg-white\" style={gameBodyStyle}>\r\n      <div className=\"container\">\r\n        <div className=\"row\">{props.children}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameBody;\r\n","import React from 'react';\r\n\r\nconst cardStyle = {\r\n  maxHeight: '150px',\r\n  objectFit: 'cover',\r\n  objectPosition: '0 0'\r\n};\r\n\r\nconst CharCard = props => {\r\n  console.log('char props:' + props);\r\n  return (\r\n    <div className=\"col-md-3\">\r\n      <div\r\n        className=\"card border-dark mb-4\"\r\n        key={props.name}\r\n        onClick={() => props.handleClick(props)}\r\n      >\r\n        <img\r\n          className=\"card-img\"\r\n          alt={props.name}\r\n          src={props.image}\r\n          data-clicked={props.isClicked}\r\n          style={cardStyle}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CharCard;\r\n","import React from 'react';\r\nimport doug_logo_2 from '../images/doug_logo_2.jpg';\r\n\r\nconst logoStyle = {\r\n  width: '200px',\r\n  height: '100px',\r\n  position: 'relative'\r\n};\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <footer className=\"page-footer page-footer-expand-sm mt-3\">\r\n      <div className=\"container\">\r\n        <div className=\"d-flex flex-row\">\r\n          <h5 className=\"align-self-center mr-3 font-weight-bold\">\r\n            Doug Funnie Memory Game!\r\n          </h5>\r\n          <img\r\n            src={doug_logo_2}\r\n            alt=\"Doug Logo\"\r\n            className=\"my-2\"\r\n            style={logoStyle}\r\n          />\r\n        </div>\r\n      </div>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React, { Component } from 'react';\nimport NavBar from './components/NavBar';\nimport Jumbotron from './components/Jumbotron';\nimport GameBody from './components/GameBody';\nimport CharCard from './components/CharCard';\nimport Footer from './components/Footer';\nimport characters from './characters.json';\nimport './App.css';\n\n// randomize characters from json\nvar randomize = function(array) {\n  // store the current array length in this variable so we make sure it's not empty\n  var currentIndex = array.length;\n  // temporaryValue is just a placeholder, as well as randomIndex\n  var temporaryValue, randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n  return array;\n};\n\nclass App extends Component {\n  state = {\n    characters,\n    banner: 'Click to begin!',\n    score: 0,\n    topScore: 0,\n    selectedChars: []\n  };\n\n  componentDidMount = () => {\n    randomize(characters);\n    console.log(characters);\n    this.setState({\n      characters: characters\n    });\n  };\n\n  handleClick = e => {\n    // clickedArray is being declared as a copy of the state, which is necessary for line the line below where we change the isClicked attribute to true\n    let clickedArray = { ...this.state };\n    // if \"isClicked\" is false (default in json) is true... (keep in mind we're inside our handleClick method...)\n    if (!e.isClicked) {\n      // changing the card property isClicked to true\n      clickedArray.characters[e.id].isClicked = true;\n      // console.log(clickedArray.characters[e.id]);\n      // console.log('array:' + clickedArray.characters);\n\n      // setState of App to this new array as character cards are clicked\n      this.setState(clickedArray);\n      this.handleScore();\n    } else {\n      this.gameReset();\n    }\n    randomize(characters);\n  };\n\n  checkRepeats = e => {\n    let { id } = e.target;\n    this.setState({\n      id: id\n    });\n\n    if (this.state.selectedChars.includes(this.state.id)) {\n      this.setState({\n        banner: 'You guessed wrong!',\n        score: 0,\n        selectedChars: []\n      });\n    }\n    console.log('checking repeats:' + this.state.selectedChars);\n  };\n\n  handleScore = () => {\n    // when score reaches 12 call gameReset\n    if (this.state.score === 12) {\n      this.gameReset();\n    } else {\n      // else increment score by 1\n      this.setState({\n        score: this.state.score + 1\n      });\n    }\n  };\n\n  storeTopScore = () => {\n    let storeScore = this.state.score;\n    let storeTopScore = this.state.topScore;\n    if (storeScore > storeTopScore) {\n      storeTopScore = storeScore;\n    }\n  };\n\n  gameReset = () => {\n    // empty the score and change banner\n    this.setState({\n      score: 0,\n      banner: 'Game Over!'\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <NavBar\n          score={this.state.score}\n          topScore={this.state.topScore}\n          banner={this.state.banner}\n          handleScore={this.handleScore}\n          storeTopScore={this.storeTopScore}\n        />\n        <Jumbotron />\n        <GameBody>\n          {this.state.characters.map(character => (\n            <CharCard\n              handleClick={this.handleClick}\n              id={character.id}\n              key={character.name}\n              image={character.image}\n            />\n          ))}\n        </GameBody>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}